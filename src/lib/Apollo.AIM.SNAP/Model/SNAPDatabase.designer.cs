#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Apollo.AIM.SNAP.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Apollo.AIM.SNAP")]
	public partial class SNAPDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSNAP_Access_Details_Form(SNAP_Access_Details_Form instance);
    partial void UpdateSNAP_Access_Details_Form(SNAP_Access_Details_Form instance);
    partial void DeleteSNAP_Access_Details_Form(SNAP_Access_Details_Form instance);
    partial void InsertSNAP_Workflow_State_Type(SNAP_Workflow_State_Type instance);
    partial void UpdateSNAP_Workflow_State_Type(SNAP_Workflow_State_Type instance);
    partial void DeleteSNAP_Workflow_State_Type(SNAP_Workflow_State_Type instance);
    partial void InsertSNAP_Actor_Group(SNAP_Actor_Group instance);
    partial void UpdateSNAP_Actor_Group(SNAP_Actor_Group instance);
    partial void DeleteSNAP_Actor_Group(SNAP_Actor_Group instance);
    partial void InsertSNAP_Actor(SNAP_Actor instance);
    partial void UpdateSNAP_Actor(SNAP_Actor instance);
    partial void DeleteSNAP_Actor(SNAP_Actor instance);
    partial void InsertSNAP_Comment(SNAP_Comment instance);
    partial void UpdateSNAP_Comment(SNAP_Comment instance);
    partial void DeleteSNAP_Comment(SNAP_Comment instance);
    partial void InsertSNAP_Comments_Type(SNAP_Comments_Type instance);
    partial void UpdateSNAP_Comments_Type(SNAP_Comments_Type instance);
    partial void DeleteSNAP_Comments_Type(SNAP_Comments_Type instance);
    partial void InsertSNAP_Request_State_Type(SNAP_Request_State_Type instance);
    partial void UpdateSNAP_Request_State_Type(SNAP_Request_State_Type instance);
    partial void DeleteSNAP_Request_State_Type(SNAP_Request_State_Type instance);
    partial void InsertSNAP_Request(SNAP_Request instance);
    partial void UpdateSNAP_Request(SNAP_Request instance);
    partial void DeleteSNAP_Request(SNAP_Request instance);
    partial void InsertSNAP_Workflow(SNAP_Workflow instance);
    partial void UpdateSNAP_Workflow(SNAP_Workflow instance);
    partial void DeleteSNAP_Workflow(SNAP_Workflow instance);
    partial void InsertSNAP_Workflow_State(SNAP_Workflow_State instance);
    partial void UpdateSNAP_Workflow_State(SNAP_Workflow_State instance);
    partial void DeleteSNAP_Workflow_State(SNAP_Workflow_State instance);
    #endregion
		
		public SNAPDatabaseDataContext() : 
				base(global::Apollo.AIM.SNAP.Properties.Settings.Default.Apollo_AIM_SNAPConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SNAPDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SNAPDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SNAPDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SNAPDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SNAP_Access_Details_Form> SNAP_Access_Details_Forms
		{
			get
			{
				return this.GetTable<SNAP_Access_Details_Form>();
			}
		}
		
		public System.Data.Linq.Table<SNAP_Workflow_State_Type> SNAP_Workflow_State_Types
		{
			get
			{
				return this.GetTable<SNAP_Workflow_State_Type>();
			}
		}
		
		public System.Data.Linq.Table<SNAP_Access_User_Text> SNAP_Access_User_Texts
		{
			get
			{
				return this.GetTable<SNAP_Access_User_Text>();
			}
		}
		
		public System.Data.Linq.Table<SNAP_Actor_Group> SNAP_Actor_Groups
		{
			get
			{
				return this.GetTable<SNAP_Actor_Group>();
			}
		}
		
		public System.Data.Linq.Table<SNAP_Actor_Group_Type> SNAP_Actor_Group_Types
		{
			get
			{
				return this.GetTable<SNAP_Actor_Group_Type>();
			}
		}
		
		public System.Data.Linq.Table<SNAP_Actor> SNAP_Actors
		{
			get
			{
				return this.GetTable<SNAP_Actor>();
			}
		}
		
		public System.Data.Linq.Table<SNAP_Comment> SNAP_Comments
		{
			get
			{
				return this.GetTable<SNAP_Comment>();
			}
		}
		
		public System.Data.Linq.Table<SNAP_Comments_Type> SNAP_Comments_Types
		{
			get
			{
				return this.GetTable<SNAP_Comments_Type>();
			}
		}
		
		public System.Data.Linq.Table<SNAP_Request_State_Type> SNAP_Request_State_Types
		{
			get
			{
				return this.GetTable<SNAP_Request_State_Type>();
			}
		}
		
		public System.Data.Linq.Table<SNAP_Request> SNAP_Requests
		{
			get
			{
				return this.GetTable<SNAP_Request>();
			}
		}
		
		public System.Data.Linq.Table<SNAP_Workflow> SNAP_Workflows
		{
			get
			{
				return this.GetTable<SNAP_Workflow>();
			}
		}
		
		public System.Data.Linq.Table<SNAP_Workflow_State> SNAP_Workflow_States
		{
			get
			{
				return this.GetTable<SNAP_Workflow_State>();
			}
		}
	}
	
	[Table(Name="dbo.SNAP_Access_Details_Form")]
	public partial class SNAP_Access_Details_Form : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pkId;
		
		private System.Nullable<byte> _parentId;
		
		private string _label;
		
		private string _description;
		
		private System.Nullable<bool> _isActive;
		
		private System.Nullable<bool> _isRequired;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkIdChanging(int value);
    partial void OnpkIdChanged();
    partial void OnparentIdChanging(System.Nullable<byte> value);
    partial void OnparentIdChanged();
    partial void OnlabelChanging(string value);
    partial void OnlabelChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnisActiveChanging(System.Nullable<bool> value);
    partial void OnisActiveChanged();
    partial void OnisRequiredChanging(System.Nullable<bool> value);
    partial void OnisRequiredChanged();
    #endregion
		
		public SNAP_Access_Details_Form()
		{
			OnCreated();
		}
		
		[Column(Storage="_pkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this.OnpkIdChanging(value);
					this.SendPropertyChanging();
					this._pkId = value;
					this.SendPropertyChanged("pkId");
					this.OnpkIdChanged();
				}
			}
		}
		
		[Column(Storage="_parentId", DbType="TinyInt")]
		public System.Nullable<byte> parentId
		{
			get
			{
				return this._parentId;
			}
			set
			{
				if ((this._parentId != value))
				{
					this.OnparentIdChanging(value);
					this.SendPropertyChanging();
					this._parentId = value;
					this.SendPropertyChanged("parentId");
					this.OnparentIdChanged();
				}
			}
		}
		
		[Column(Storage="_label", DbType="NVarChar(50)")]
		public string label
		{
			get
			{
				return this._label;
			}
			set
			{
				if ((this._label != value))
				{
					this.OnlabelChanging(value);
					this.SendPropertyChanging();
					this._label = value;
					this.SendPropertyChanged("label");
					this.OnlabelChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_isActive", DbType="Bit")]
		public System.Nullable<bool> isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[Column(Storage="_isRequired", DbType="Bit")]
		public System.Nullable<bool> isRequired
		{
			get
			{
				return this._isRequired;
			}
			set
			{
				if ((this._isRequired != value))
				{
					this.OnisRequiredChanging(value);
					this.SendPropertyChanging();
					this._isRequired = value;
					this.SendPropertyChanged("isRequired");
					this.OnisRequiredChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SNAP_Workflow_State_Type")]
	public partial class SNAP_Workflow_State_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pkId;
		
		private string _typeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkIdChanging(int value);
    partial void OnpkIdChanged();
    partial void OntypeNameChanging(string value);
    partial void OntypeNameChanged();
    #endregion
		
		public SNAP_Workflow_State_Type()
		{
			OnCreated();
		}
		
		[Column(Storage="_pkId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this.OnpkIdChanging(value);
					this.SendPropertyChanging();
					this._pkId = value;
					this.SendPropertyChanged("pkId");
					this.OnpkIdChanged();
				}
			}
		}
		
		[Column(Storage="_typeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string typeName
		{
			get
			{
				return this._typeName;
			}
			set
			{
				if ((this._typeName != value))
				{
					this.OntypeNameChanging(value);
					this.SendPropertyChanging();
					this._typeName = value;
					this.SendPropertyChanged("typeName");
					this.OntypeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SNAP_Access_User_Text")]
	public partial class SNAP_Access_User_Text
	{
		
		private int _requestId;
		
		private int _access_details_formId;
		
		private string _userText;
		
		private System.Nullable<System.DateTime> _modifiedDate;
		
		public SNAP_Access_User_Text()
		{
		}
		
		[Column(Storage="_requestId", DbType="Int NOT NULL")]
		public int requestId
		{
			get
			{
				return this._requestId;
			}
			set
			{
				if ((this._requestId != value))
				{
					this._requestId = value;
				}
			}
		}
		
		[Column(Storage="_access_details_formId", DbType="Int NOT NULL")]
		public int access_details_formId
		{
			get
			{
				return this._access_details_formId;
			}
			set
			{
				if ((this._access_details_formId != value))
				{
					this._access_details_formId = value;
				}
			}
		}
		
		[Column(Storage="_userText", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string userText
		{
			get
			{
				return this._userText;
			}
			set
			{
				if ((this._userText != value))
				{
					this._userText = value;
				}
			}
		}
		
		[Column(Storage="_modifiedDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> modifiedDate
		{
			get
			{
				return this._modifiedDate;
			}
			set
			{
				if ((this._modifiedDate != value))
				{
					this._modifiedDate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.SNAP_Actor_Group")]
	public partial class SNAP_Actor_Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pkId;
		
		private string _groupName;
		
		private string _description;
		
		private System.Nullable<byte> _actorGroupType;
		
		private System.Nullable<bool> _isActive;
		
		private EntitySet<SNAP_Actor> _SNAP_Actors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkIdChanging(int value);
    partial void OnpkIdChanged();
    partial void OngroupNameChanging(string value);
    partial void OngroupNameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnactorGroupTypeChanging(System.Nullable<byte> value);
    partial void OnactorGroupTypeChanged();
    partial void OnisActiveChanging(System.Nullable<bool> value);
    partial void OnisActiveChanged();
    #endregion
		
		public SNAP_Actor_Group()
		{
			this._SNAP_Actors = new EntitySet<SNAP_Actor>(new Action<SNAP_Actor>(this.attach_SNAP_Actors), new Action<SNAP_Actor>(this.detach_SNAP_Actors));
			OnCreated();
		}
		
		[Column(Storage="_pkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this.OnpkIdChanging(value);
					this.SendPropertyChanging();
					this._pkId = value;
					this.SendPropertyChanged("pkId");
					this.OnpkIdChanged();
				}
			}
		}
		
		[Column(Storage="_groupName", DbType="NVarChar(50)")]
		public string groupName
		{
			get
			{
				return this._groupName;
			}
			set
			{
				if ((this._groupName != value))
				{
					this.OngroupNameChanging(value);
					this.SendPropertyChanging();
					this._groupName = value;
					this.SendPropertyChanged("groupName");
					this.OngroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_actorGroupType", DbType="TinyInt")]
		public System.Nullable<byte> actorGroupType
		{
			get
			{
				return this._actorGroupType;
			}
			set
			{
				if ((this._actorGroupType != value))
				{
					this.OnactorGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._actorGroupType = value;
					this.SendPropertyChanged("actorGroupType");
					this.OnactorGroupTypeChanged();
				}
			}
		}
		
		[Column(Storage="_isActive", DbType="Bit")]
		public System.Nullable<bool> isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[Association(Name="SNAP_Actor_Group_SNAP_Actor", Storage="_SNAP_Actors", ThisKey="pkId", OtherKey="actor_groupId")]
		public EntitySet<SNAP_Actor> SNAP_Actors
		{
			get
			{
				return this._SNAP_Actors;
			}
			set
			{
				this._SNAP_Actors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SNAP_Actors(SNAP_Actor entity)
		{
			this.SendPropertyChanging();
			entity.SNAP_Actor_Group = this;
		}
		
		private void detach_SNAP_Actors(SNAP_Actor entity)
		{
			this.SendPropertyChanging();
			entity.SNAP_Actor_Group = null;
		}
	}
	
	[Table(Name="dbo.SNAP_Actor_Group_Type")]
	public partial class SNAP_Actor_Group_Type
	{
		
		private System.Nullable<int> _pkId;
		
		private string _typeName;
		
		public SNAP_Actor_Group_Type()
		{
		}
		
		[Column(Storage="_pkId", DbType="Int")]
		public System.Nullable<int> pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this._pkId = value;
				}
			}
		}
		
		[Column(Storage="_typeName", DbType="NVarChar(50)")]
		public string typeName
		{
			get
			{
				return this._typeName;
			}
			set
			{
				if ((this._typeName != value))
				{
					this._typeName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.SNAP_Actors")]
	public partial class SNAP_Actor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pkId;
		
		private int _actor_groupId;
		
		private string _userId;
		
		private string _displayName;
		
		private string _emailAddress;
		
		private bool _isDefault;
		
		private bool _isActive;
		
		private EntitySet<SNAP_Workflow> _SNAP_Workflows;
		
		private EntityRef<SNAP_Actor_Group> _SNAP_Actor_Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkIdChanging(int value);
    partial void OnpkIdChanged();
    partial void Onactor_groupIdChanging(int value);
    partial void Onactor_groupIdChanged();
    partial void OnuserIdChanging(string value);
    partial void OnuserIdChanged();
    partial void OndisplayNameChanging(string value);
    partial void OndisplayNameChanged();
    partial void OnemailAddressChanging(string value);
    partial void OnemailAddressChanged();
    partial void OnisDefaultChanging(bool value);
    partial void OnisDefaultChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public SNAP_Actor()
		{
			this._SNAP_Workflows = new EntitySet<SNAP_Workflow>(new Action<SNAP_Workflow>(this.attach_SNAP_Workflows), new Action<SNAP_Workflow>(this.detach_SNAP_Workflows));
			this._SNAP_Actor_Group = default(EntityRef<SNAP_Actor_Group>);
			OnCreated();
		}
		
		[Column(Storage="_pkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this.OnpkIdChanging(value);
					this.SendPropertyChanging();
					this._pkId = value;
					this.SendPropertyChanged("pkId");
					this.OnpkIdChanged();
				}
			}
		}
		
		[Column(Storage="_actor_groupId", DbType="Int NOT NULL")]
		public int actor_groupId
		{
			get
			{
				return this._actor_groupId;
			}
			set
			{
				if ((this._actor_groupId != value))
				{
					if (this._SNAP_Actor_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onactor_groupIdChanging(value);
					this.SendPropertyChanging();
					this._actor_groupId = value;
					this.SendPropertyChanged("actor_groupId");
					this.Onactor_groupIdChanged();
				}
			}
		}
		
		[Column(Storage="_userId", DbType="NVarChar(10)")]
		public string userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[Column(Storage="_displayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string displayName
		{
			get
			{
				return this._displayName;
			}
			set
			{
				if ((this._displayName != value))
				{
					this.OndisplayNameChanging(value);
					this.SendPropertyChanging();
					this._displayName = value;
					this.SendPropertyChanged("displayName");
					this.OndisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_emailAddress", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string emailAddress
		{
			get
			{
				return this._emailAddress;
			}
			set
			{
				if ((this._emailAddress != value))
				{
					this.OnemailAddressChanging(value);
					this.SendPropertyChanging();
					this._emailAddress = value;
					this.SendPropertyChanged("emailAddress");
					this.OnemailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_isDefault", DbType="Bit NOT NULL")]
		public bool isDefault
		{
			get
			{
				return this._isDefault;
			}
			set
			{
				if ((this._isDefault != value))
				{
					this.OnisDefaultChanging(value);
					this.SendPropertyChanging();
					this._isDefault = value;
					this.SendPropertyChanged("isDefault");
					this.OnisDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[Association(Name="SNAP_Actor_SNAP_Workflow", Storage="_SNAP_Workflows", ThisKey="pkId", OtherKey="actorId")]
		public EntitySet<SNAP_Workflow> SNAP_Workflows
		{
			get
			{
				return this._SNAP_Workflows;
			}
			set
			{
				this._SNAP_Workflows.Assign(value);
			}
		}
		
		[Association(Name="SNAP_Actor_Group_SNAP_Actor", Storage="_SNAP_Actor_Group", ThisKey="actor_groupId", OtherKey="pkId", IsForeignKey=true)]
		public SNAP_Actor_Group SNAP_Actor_Group
		{
			get
			{
				return this._SNAP_Actor_Group.Entity;
			}
			set
			{
				SNAP_Actor_Group previousValue = this._SNAP_Actor_Group.Entity;
				if (((previousValue != value) 
							|| (this._SNAP_Actor_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SNAP_Actor_Group.Entity = null;
						previousValue.SNAP_Actors.Remove(this);
					}
					this._SNAP_Actor_Group.Entity = value;
					if ((value != null))
					{
						value.SNAP_Actors.Add(this);
						this._actor_groupId = value.pkId;
					}
					else
					{
						this._actor_groupId = default(int);
					}
					this.SendPropertyChanged("SNAP_Actor_Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SNAP_Workflows(SNAP_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.SNAP_Actor = this;
		}
		
		private void detach_SNAP_Workflows(SNAP_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.SNAP_Actor = null;
		}
	}
	
	[Table(Name="dbo.SNAP_Comments")]
	public partial class SNAP_Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pkId;
		
		private int _workflowId;
		
		private byte _commentTypeEnum;
		
		private string _commentText;
		
		private System.DateTime _createdDate;
		
		private EntityRef<SNAP_Workflow> _SNAP_Workflow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkIdChanging(int value);
    partial void OnpkIdChanged();
    partial void OnworkflowIdChanging(int value);
    partial void OnworkflowIdChanged();
    partial void OncommentTypeEnumChanging(byte value);
    partial void OncommentTypeEnumChanged();
    partial void OncommentTextChanging(string value);
    partial void OncommentTextChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    #endregion
		
		public SNAP_Comment()
		{
			this._SNAP_Workflow = default(EntityRef<SNAP_Workflow>);
			OnCreated();
		}
		
		[Column(Storage="_pkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this.OnpkIdChanging(value);
					this.SendPropertyChanging();
					this._pkId = value;
					this.SendPropertyChanged("pkId");
					this.OnpkIdChanged();
				}
			}
		}
		
		[Column(Storage="_workflowId", DbType="Int NOT NULL")]
		public int workflowId
		{
			get
			{
				return this._workflowId;
			}
			set
			{
				if ((this._workflowId != value))
				{
					if (this._SNAP_Workflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnworkflowIdChanging(value);
					this.SendPropertyChanging();
					this._workflowId = value;
					this.SendPropertyChanged("workflowId");
					this.OnworkflowIdChanged();
				}
			}
		}
		
		[Column(Storage="_commentTypeEnum", DbType="TinyInt NOT NULL")]
		public byte commentTypeEnum
		{
			get
			{
				return this._commentTypeEnum;
			}
			set
			{
				if ((this._commentTypeEnum != value))
				{
					this.OncommentTypeEnumChanging(value);
					this.SendPropertyChanging();
					this._commentTypeEnum = value;
					this.SendPropertyChanged("commentTypeEnum");
					this.OncommentTypeEnumChanged();
				}
			}
		}
		
		[Column(Storage="_commentText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string commentText
		{
			get
			{
				return this._commentText;
			}
			set
			{
				if ((this._commentText != value))
				{
					this.OncommentTextChanging(value);
					this.SendPropertyChanging();
					this._commentText = value;
					this.SendPropertyChanged("commentText");
					this.OncommentTextChanged();
				}
			}
		}
		
		[Column(Storage="_createdDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[Association(Name="SNAP_Workflow_SNAP_Comment", Storage="_SNAP_Workflow", ThisKey="workflowId", OtherKey="pkId", IsForeignKey=true)]
		public SNAP_Workflow SNAP_Workflow
		{
			get
			{
				return this._SNAP_Workflow.Entity;
			}
			set
			{
				SNAP_Workflow previousValue = this._SNAP_Workflow.Entity;
				if (((previousValue != value) 
							|| (this._SNAP_Workflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SNAP_Workflow.Entity = null;
						previousValue.SNAP_Comments.Remove(this);
					}
					this._SNAP_Workflow.Entity = value;
					if ((value != null))
					{
						value.SNAP_Comments.Add(this);
						this._workflowId = value.pkId;
					}
					else
					{
						this._workflowId = default(int);
					}
					this.SendPropertyChanged("SNAP_Workflow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SNAP_Comments_Type")]
	public partial class SNAP_Comments_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pkId;
		
		private string _typeName;
		
		private string _audience;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkIdChanging(int value);
    partial void OnpkIdChanged();
    partial void OntypeNameChanging(string value);
    partial void OntypeNameChanged();
    partial void OnaudienceChanging(string value);
    partial void OnaudienceChanged();
    #endregion
		
		public SNAP_Comments_Type()
		{
			OnCreated();
		}
		
		[Column(Storage="_pkId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this.OnpkIdChanging(value);
					this.SendPropertyChanging();
					this._pkId = value;
					this.SendPropertyChanged("pkId");
					this.OnpkIdChanged();
				}
			}
		}
		
		[Column(Storage="_typeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string typeName
		{
			get
			{
				return this._typeName;
			}
			set
			{
				if ((this._typeName != value))
				{
					this.OntypeNameChanging(value);
					this.SendPropertyChanging();
					this._typeName = value;
					this.SendPropertyChanged("typeName");
					this.OntypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_audience", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string audience
		{
			get
			{
				return this._audience;
			}
			set
			{
				if ((this._audience != value))
				{
					this.OnaudienceChanging(value);
					this.SendPropertyChanging();
					this._audience = value;
					this.SendPropertyChanged("audience");
					this.OnaudienceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SNAP_Request_State_Type")]
	public partial class SNAP_Request_State_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pkId;
		
		private string _typeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkIdChanging(int value);
    partial void OnpkIdChanged();
    partial void OntypeNameChanging(string value);
    partial void OntypeNameChanged();
    #endregion
		
		public SNAP_Request_State_Type()
		{
			OnCreated();
		}
		
		[Column(Storage="_pkId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this.OnpkIdChanging(value);
					this.SendPropertyChanging();
					this._pkId = value;
					this.SendPropertyChanged("pkId");
					this.OnpkIdChanged();
				}
			}
		}
		
		[Column(Storage="_typeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string typeName
		{
			get
			{
				return this._typeName;
			}
			set
			{
				if ((this._typeName != value))
				{
					this.OntypeNameChanging(value);
					this.SendPropertyChanging();
					this._typeName = value;
					this.SendPropertyChanged("typeName");
					this.OntypeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SNAP_Requests")]
	public partial class SNAP_Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pkId;
		
		private string _submittedBy;
		
		private string _userId;
		
		private string _userDisplayName;
		
		private string _userTitle;
		
		private System.Nullable<int> _ticketNumber;
		
		private bool _isChanged;
		
		private byte _statusEnum;
		
		private System.DateTime _createdDate;
		
		private EntitySet<SNAP_Workflow> _SNAP_Workflows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkIdChanging(int value);
    partial void OnpkIdChanged();
    partial void OnsubmittedByChanging(string value);
    partial void OnsubmittedByChanged();
    partial void OnuserIdChanging(string value);
    partial void OnuserIdChanged();
    partial void OnuserDisplayNameChanging(string value);
    partial void OnuserDisplayNameChanged();
    partial void OnuserTitleChanging(string value);
    partial void OnuserTitleChanged();
    partial void OnticketNumberChanging(System.Nullable<int> value);
    partial void OnticketNumberChanged();
    partial void OnisChangedChanging(bool value);
    partial void OnisChangedChanged();
    partial void OnstatusEnumChanging(byte value);
    partial void OnstatusEnumChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    #endregion
		
		public SNAP_Request()
		{
			this._SNAP_Workflows = new EntitySet<SNAP_Workflow>(new Action<SNAP_Workflow>(this.attach_SNAP_Workflows), new Action<SNAP_Workflow>(this.detach_SNAP_Workflows));
			OnCreated();
		}
		
		[Column(Storage="_pkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this.OnpkIdChanging(value);
					this.SendPropertyChanging();
					this._pkId = value;
					this.SendPropertyChanged("pkId");
					this.OnpkIdChanged();
				}
			}
		}
		
		[Column(Storage="_submittedBy", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string submittedBy
		{
			get
			{
				return this._submittedBy;
			}
			set
			{
				if ((this._submittedBy != value))
				{
					this.OnsubmittedByChanging(value);
					this.SendPropertyChanging();
					this._submittedBy = value;
					this.SendPropertyChanged("submittedBy");
					this.OnsubmittedByChanged();
				}
			}
		}
		
		[Column(Storage="_userId", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[Column(Storage="_userDisplayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string userDisplayName
		{
			get
			{
				return this._userDisplayName;
			}
			set
			{
				if ((this._userDisplayName != value))
				{
					this.OnuserDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._userDisplayName = value;
					this.SendPropertyChanged("userDisplayName");
					this.OnuserDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_userTitle", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string userTitle
		{
			get
			{
				return this._userTitle;
			}
			set
			{
				if ((this._userTitle != value))
				{
					this.OnuserTitleChanging(value);
					this.SendPropertyChanging();
					this._userTitle = value;
					this.SendPropertyChanged("userTitle");
					this.OnuserTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ticketNumber", DbType="Int")]
		public System.Nullable<int> ticketNumber
		{
			get
			{
				return this._ticketNumber;
			}
			set
			{
				if ((this._ticketNumber != value))
				{
					this.OnticketNumberChanging(value);
					this.SendPropertyChanging();
					this._ticketNumber = value;
					this.SendPropertyChanged("ticketNumber");
					this.OnticketNumberChanged();
				}
			}
		}
		
		[Column(Storage="_isChanged", DbType="Bit NOT NULL")]
		public bool isChanged
		{
			get
			{
				return this._isChanged;
			}
			set
			{
				if ((this._isChanged != value))
				{
					this.OnisChangedChanging(value);
					this.SendPropertyChanging();
					this._isChanged = value;
					this.SendPropertyChanged("isChanged");
					this.OnisChangedChanged();
				}
			}
		}
		
		[Column(Storage="_statusEnum", DbType="TinyInt NOT NULL")]
		public byte statusEnum
		{
			get
			{
				return this._statusEnum;
			}
			set
			{
				if ((this._statusEnum != value))
				{
					this.OnstatusEnumChanging(value);
					this.SendPropertyChanging();
					this._statusEnum = value;
					this.SendPropertyChanged("statusEnum");
					this.OnstatusEnumChanged();
				}
			}
		}
		
		[Column(Storage="_createdDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[Association(Name="SNAP_Request_SNAP_Workflow", Storage="_SNAP_Workflows", ThisKey="pkId", OtherKey="requestId")]
		public EntitySet<SNAP_Workflow> SNAP_Workflows
		{
			get
			{
				return this._SNAP_Workflows;
			}
			set
			{
				this._SNAP_Workflows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SNAP_Workflows(SNAP_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.SNAP_Request = this;
		}
		
		private void detach_SNAP_Workflows(SNAP_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.SNAP_Request = null;
		}
	}
	
	[Table(Name="dbo.SNAP_Workflow")]
	public partial class SNAP_Workflow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pkId;
		
		private int _requestId;
		
		private int _actorId;
		
		private EntitySet<SNAP_Comment> _SNAP_Comments;
		
		private EntitySet<SNAP_Workflow_State> _SNAP_Workflow_States;
		
		private EntityRef<SNAP_Actor> _SNAP_Actor;
		
		private EntityRef<SNAP_Request> _SNAP_Request;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkIdChanging(int value);
    partial void OnpkIdChanged();
    partial void OnrequestIdChanging(int value);
    partial void OnrequestIdChanged();
    partial void OnactorIdChanging(int value);
    partial void OnactorIdChanged();
    #endregion
		
		public SNAP_Workflow()
		{
			this._SNAP_Comments = new EntitySet<SNAP_Comment>(new Action<SNAP_Comment>(this.attach_SNAP_Comments), new Action<SNAP_Comment>(this.detach_SNAP_Comments));
			this._SNAP_Workflow_States = new EntitySet<SNAP_Workflow_State>(new Action<SNAP_Workflow_State>(this.attach_SNAP_Workflow_States), new Action<SNAP_Workflow_State>(this.detach_SNAP_Workflow_States));
			this._SNAP_Actor = default(EntityRef<SNAP_Actor>);
			this._SNAP_Request = default(EntityRef<SNAP_Request>);
			OnCreated();
		}
		
		[Column(Storage="_pkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this.OnpkIdChanging(value);
					this.SendPropertyChanging();
					this._pkId = value;
					this.SendPropertyChanged("pkId");
					this.OnpkIdChanged();
				}
			}
		}
		
		[Column(Storage="_requestId", DbType="Int NOT NULL")]
		public int requestId
		{
			get
			{
				return this._requestId;
			}
			set
			{
				if ((this._requestId != value))
				{
					if (this._SNAP_Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrequestIdChanging(value);
					this.SendPropertyChanging();
					this._requestId = value;
					this.SendPropertyChanged("requestId");
					this.OnrequestIdChanged();
				}
			}
		}
		
		[Column(Storage="_actorId", DbType="Int NOT NULL")]
		public int actorId
		{
			get
			{
				return this._actorId;
			}
			set
			{
				if ((this._actorId != value))
				{
					if (this._SNAP_Actor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnactorIdChanging(value);
					this.SendPropertyChanging();
					this._actorId = value;
					this.SendPropertyChanged("actorId");
					this.OnactorIdChanged();
				}
			}
		}
		
		[Association(Name="SNAP_Workflow_SNAP_Comment", Storage="_SNAP_Comments", ThisKey="pkId", OtherKey="workflowId")]
		public EntitySet<SNAP_Comment> SNAP_Comments
		{
			get
			{
				return this._SNAP_Comments;
			}
			set
			{
				this._SNAP_Comments.Assign(value);
			}
		}
		
		[Association(Name="SNAP_Workflow_SNAP_Workflow_State", Storage="_SNAP_Workflow_States", ThisKey="pkId", OtherKey="workflowId")]
		public EntitySet<SNAP_Workflow_State> SNAP_Workflow_States
		{
			get
			{
				return this._SNAP_Workflow_States;
			}
			set
			{
				this._SNAP_Workflow_States.Assign(value);
			}
		}
		
		[Association(Name="SNAP_Actor_SNAP_Workflow", Storage="_SNAP_Actor", ThisKey="actorId", OtherKey="pkId", IsForeignKey=true)]
		public SNAP_Actor SNAP_Actor
		{
			get
			{
				return this._SNAP_Actor.Entity;
			}
			set
			{
				SNAP_Actor previousValue = this._SNAP_Actor.Entity;
				if (((previousValue != value) 
							|| (this._SNAP_Actor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SNAP_Actor.Entity = null;
						previousValue.SNAP_Workflows.Remove(this);
					}
					this._SNAP_Actor.Entity = value;
					if ((value != null))
					{
						value.SNAP_Workflows.Add(this);
						this._actorId = value.pkId;
					}
					else
					{
						this._actorId = default(int);
					}
					this.SendPropertyChanged("SNAP_Actor");
				}
			}
		}
		
		[Association(Name="SNAP_Request_SNAP_Workflow", Storage="_SNAP_Request", ThisKey="requestId", OtherKey="pkId", IsForeignKey=true)]
		public SNAP_Request SNAP_Request
		{
			get
			{
				return this._SNAP_Request.Entity;
			}
			set
			{
				SNAP_Request previousValue = this._SNAP_Request.Entity;
				if (((previousValue != value) 
							|| (this._SNAP_Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SNAP_Request.Entity = null;
						previousValue.SNAP_Workflows.Remove(this);
					}
					this._SNAP_Request.Entity = value;
					if ((value != null))
					{
						value.SNAP_Workflows.Add(this);
						this._requestId = value.pkId;
					}
					else
					{
						this._requestId = default(int);
					}
					this.SendPropertyChanged("SNAP_Request");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SNAP_Comments(SNAP_Comment entity)
		{
			this.SendPropertyChanging();
			entity.SNAP_Workflow = this;
		}
		
		private void detach_SNAP_Comments(SNAP_Comment entity)
		{
			this.SendPropertyChanging();
			entity.SNAP_Workflow = null;
		}
		
		private void attach_SNAP_Workflow_States(SNAP_Workflow_State entity)
		{
			this.SendPropertyChanging();
			entity.SNAP_Workflow = this;
		}
		
		private void detach_SNAP_Workflow_States(SNAP_Workflow_State entity)
		{
			this.SendPropertyChanging();
			entity.SNAP_Workflow = null;
		}
	}
	
	[Table(Name="dbo.SNAP_Workflow_State")]
	public partial class SNAP_Workflow_State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pkId;
		
		private int _workflowId;
		
		private byte _workflowStatusEnum;
		
		private System.DateTime _notifyDate;
		
		private System.DateTime _dueDate;
		
		private System.Nullable<System.DateTime> _completedDate;
		
		private EntityRef<SNAP_Workflow> _SNAP_Workflow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkIdChanging(int value);
    partial void OnpkIdChanged();
    partial void OnworkflowIdChanging(int value);
    partial void OnworkflowIdChanged();
    partial void OnworkflowStatusEnumChanging(byte value);
    partial void OnworkflowStatusEnumChanged();
    partial void OnnotifyDateChanging(System.DateTime value);
    partial void OnnotifyDateChanged();
    partial void OndueDateChanging(System.DateTime value);
    partial void OndueDateChanged();
    partial void OncompletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OncompletedDateChanged();
    #endregion
		
		public SNAP_Workflow_State()
		{
			this._SNAP_Workflow = default(EntityRef<SNAP_Workflow>);
			OnCreated();
		}
		
		[Column(Storage="_pkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this.OnpkIdChanging(value);
					this.SendPropertyChanging();
					this._pkId = value;
					this.SendPropertyChanged("pkId");
					this.OnpkIdChanged();
				}
			}
		}
		
		[Column(Storage="_workflowId", DbType="Int NOT NULL")]
		public int workflowId
		{
			get
			{
				return this._workflowId;
			}
			set
			{
				if ((this._workflowId != value))
				{
					if (this._SNAP_Workflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnworkflowIdChanging(value);
					this.SendPropertyChanging();
					this._workflowId = value;
					this.SendPropertyChanged("workflowId");
					this.OnworkflowIdChanged();
				}
			}
		}
		
		[Column(Storage="_workflowStatusEnum", DbType="TinyInt NOT NULL")]
		public byte workflowStatusEnum
		{
			get
			{
				return this._workflowStatusEnum;
			}
			set
			{
				if ((this._workflowStatusEnum != value))
				{
					this.OnworkflowStatusEnumChanging(value);
					this.SendPropertyChanging();
					this._workflowStatusEnum = value;
					this.SendPropertyChanged("workflowStatusEnum");
					this.OnworkflowStatusEnumChanged();
				}
			}
		}
		
		[Column(Storage="_notifyDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime notifyDate
		{
			get
			{
				return this._notifyDate;
			}
			set
			{
				if ((this._notifyDate != value))
				{
					this.OnnotifyDateChanging(value);
					this.SendPropertyChanging();
					this._notifyDate = value;
					this.SendPropertyChanged("notifyDate");
					this.OnnotifyDateChanged();
				}
			}
		}
		
		[Column(Storage="_dueDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime dueDate
		{
			get
			{
				return this._dueDate;
			}
			set
			{
				if ((this._dueDate != value))
				{
					this.OndueDateChanging(value);
					this.SendPropertyChanging();
					this._dueDate = value;
					this.SendPropertyChanged("dueDate");
					this.OndueDateChanged();
				}
			}
		}
		
		[Column(Storage="_completedDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> completedDate
		{
			get
			{
				return this._completedDate;
			}
			set
			{
				if ((this._completedDate != value))
				{
					this.OncompletedDateChanging(value);
					this.SendPropertyChanging();
					this._completedDate = value;
					this.SendPropertyChanged("completedDate");
					this.OncompletedDateChanged();
				}
			}
		}
		
		[Association(Name="SNAP_Workflow_SNAP_Workflow_State", Storage="_SNAP_Workflow", ThisKey="workflowId", OtherKey="pkId", IsForeignKey=true)]
		public SNAP_Workflow SNAP_Workflow
		{
			get
			{
				return this._SNAP_Workflow.Entity;
			}
			set
			{
				SNAP_Workflow previousValue = this._SNAP_Workflow.Entity;
				if (((previousValue != value) 
							|| (this._SNAP_Workflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SNAP_Workflow.Entity = null;
						previousValue.SNAP_Workflow_States.Remove(this);
					}
					this._SNAP_Workflow.Entity = value;
					if ((value != null))
					{
						value.SNAP_Workflow_States.Add(this);
						this._workflowId = value.pkId;
					}
					else
					{
						this._workflowId = default(int);
					}
					this.SendPropertyChanged("SNAP_Workflow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
